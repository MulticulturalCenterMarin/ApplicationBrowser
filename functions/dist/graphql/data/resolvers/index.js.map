{"version":3,"sources":["../../../../src/graphql/data/resolvers/index.js"],"names":["db","require","resolveFunctions","Query","item","entity","branch","boundaries","order","databaseSearchSingle","data","then","result","error","list","databaseSearch","items","user","uid","equalTo","orderByChild","User","Task"],"mappings":"sXAAA,GAAMA,IAAKC,QAAQ,mBAAR,CAAX,CAGMC,iBAAmB,CACvBC,MAAO,CAELC,IAFK,mBAGL,SADSC,MACT,KADiBC,MACjB,KADyBC,UACzB,KADqCC,KACrC,CACE,EAASF,KADX,CAEE,GAAM,GAAON,GAAGS,oBAAH,CAAwB,CAACJ,QAAD,CAASC,QAAT,CAAiBC,YAAjB,CAA6BC,OAA7B,CAAxB,CAAb,CACA,GACA,CACE,MAAOE,GAAKC,IAAL,CAAU,WACjB,CACE,MAAOC,EACR,CAHM,CAIR,CAAC,QAAc,CACZ,MAAOC,EACR,CACJ,CAfI,CAgBLC,IAhBK,mBAiBL,SADST,MACT,KADiBC,MACjB,KADyBC,UACzB,KADqCC,KACrC,CACE,EAASF,KADX,CAEE,GAAM,GAAON,GAAGe,cAAH,CAAkB,CAACV,QAAD,CAASC,QAAT,CAAiBC,YAAjB,CAA6BC,OAA7B,CAAlB,CAAb,CACA,GAAI,CACF,MAAOE,GAAKC,IAAL,CAAU,WAAW,CAC1B,wBAAQK,MAAOJ,CAAf,EAAwBP,CAAxB,CAAiCO,CAAjC,CACD,CAFM,CAGR,CAAC,QAAc,CACd,MAAOC,EACR,CACF,CA3BI,CA6BLI,IA7BK,mBA6B+B,SAA1BC,GAA0B,KAArBX,UAAqB,KAATC,KAAS,CAGlC,cACKD,CADL,EAEEY,QAASD,CAFX,EAHkC,CAOlC,EAAQ,CACNE,aAAc,KADR,CAP0B,CAUlC,GAAM,GAAOpB,GAAGe,cAAH,CAAkB,CAACV,OATjB,OASgB,CAASC,SAAT,CAAiBC,YAAjB,CAA6BC,OAA7B,CAAlB,CAAb,CACA,GAAI,CACF,MAAOE,GAAKC,IAAL,CAAU,WAAW,CAC1B,MAAOC,GAAO,CAAP,CACR,CAFM,CAGR,CAAC,QAAc,CACd,MAAOC,EACR,CACF,CA/CI,CADgB,CAkDvBQ,OAlDuB,CAqDvBC,OArDuB,CAHzB,C,gBA4DepB,gB","file":"index.js","sourcesContent":["const db = require('../../../database');\n\n\nconst resolveFunctions = {\n  Query: {\n    /*---*--- Item ---*---*/\n    item(_, {entity, branch, boundaries, order})\n    {\n      branch = branch || []\n      const data = db.databaseSearchSingle({entity, branch, boundaries, order})\n      try\n      {\n        return data.then((result)=>\n        {\n          return result\n        })\n      } catch (error) {\n          return error\n        }\n    },\n    list(_, {entity, branch, boundaries, order})\n    {\n      branch = branch || []\n      const data = db.databaseSearch({entity, branch, boundaries, order})\n      try {\n        return data.then((result)=> {\n          return {items: result, [entity]: result } // TODO: Eliminate [entity], but double check Frontend first.\n        })\n      } catch (error) {\n        return error\n      }\n    },\n  \n    user(_, { uid, boundaries, order }) {\n      const entity = 'users'\n      const branch = []\n      boundaries = {\n        ...boundaries,\n        equalTo: uid\n      }\n      order = {\n        orderByChild: 'uid',\n      }\n      const data = db.databaseSearch({entity, branch, boundaries, order})\n      try {\n        return data.then((result)=> {\n          return result[0]\n        })\n      } catch (error) {\n        return error\n      }\n    },\n  },\n  User: {\n\n  },\n  Task: {\n  }\n}\n\nexport default resolveFunctions\n"]}