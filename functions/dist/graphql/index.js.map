{"version":3,"sources":["../../src/graphql/index.js"],"names":["admin","require","cookieParser","cors","origin","validateFirebaseIdToken","req","headers","authorization","startsWith","cookies","__session","console","error","res","status","send","split","auth","verifyIdToken","idToken","then","user","decodedIdToken","next","catch","setupGraphQLServer","graphQLServer","use","json","schema","context","endpointURL","set"],"mappings":"oEAEA,2V,wEADA,GAAMA,OAAQC,QAAQ,gBAAR,CAAd,CAQMC,aAAeD,QAAQ,eAAR,GARrB,CASME,KAAOF,QAAQ,MAAR,EAAgB,CAACG,SAAD,CAAhB,CATb,CAaMC,wBAA0B,eAAoB,CAClD,GAAI,CAAC,CAACC,EAAIC,OAAJ,CAAYC,aAAb,EAA8B,CAACF,EAAIC,OAAJ,CAAYC,aAAZ,CAA0BC,UAA1B,CAAqC,SAArC,CAAhC,GACA,CAACH,EAAII,OAAJ,CAAYC,SADjB,CAOE,MALAC,SAAQC,KAAR,CAAc,gFAAd,CACI,8EADJ,CAEI,2CAFJ,CAGI,uCAHJ,CAKA,KADAC,GAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB,CACA,CAGF,GAAI,EAAJ,CAXkD,EAY9CV,EAAIC,OAAJ,CAAYC,aAAZ,EAA6BF,EAAIC,OAAJ,CAAYC,aAAZ,CAA0BC,UAA1B,CAAqC,SAArC,CAZiB,CActCH,EAAIC,OAAJ,CAAYC,aAAZ,CAA0BS,KAA1B,CAAgC,SAAhC,EAA2C,CAA3C,CAdsC,CAiBtCX,EAAII,OAAJ,CAAYC,SAjB0B,CAmBlDX,MAAMkB,IAAN,GAAaC,aAAb,CAA2BC,CAA3B,EAAoCC,IAApC,CAAyC,WAAkB,CACzDf,EAAIgB,IAAJ,CAAWC,CAD8C,CAEzDC,GACD,CAHD,EAGGC,KAHH,CAGS,UAAS,CAChBX,EAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB,CACD,CALD,CAMD,CAtCD,CAyCMU,mBAAqB,UAAM,CAE/B,GAAM,GAAgB,uBAAtB,CAwBA,MAvBAC,GAAcC,GAAd,CAAkBzB,IAAlB,CAuBA,CAtBAwB,EAAcC,GAAd,CAAkB1B,YAAlB,CAsBA,CAlBAyB,EAAcC,GAAd,CACE,UADF,CAEE,qBAAWC,IAAX,EAFF,CAGE,yCAAe,CAAEC,uBAAF,CAAUC,UAAV,CAAf,CAHF,CAkBA,CAXAJ,EAAcC,GAAd,CACE,WADF,CAEE,0CAAgB,CAAEI,YAAa,cAAf,CAAhB,CAFF,CAWA,CALAL,EAAcC,GAAd,CAAkB,SAAlB,CAA6B,aAAc,CACzCd,EAAImB,GAAJ,CAAQ,cAAR,CAAwB,YAAxB,CADyC,CAEzCnB,EAAIE,IAAJ,CAAS,gDAAT,CACD,CAHD,CAKA,CAAOW,CACR,CApED,C,gBAsEeD,kB","file":"index.js","sourcesContent":["/* ------------------------- External Dependencies -------------------------- */\nconst admin = require('firebase-admin');\nimport bodyParser from \"body-parser\"\nimport express from \"express\"\nimport { \n  graphqlExpress,\n  graphiqlExpress\n} from \"graphql-server-express\"\nimport { printSchema } from \"graphql/utilities/schemaPrinter\"\nconst cookieParser = require('cookie-parser')();\nconst cors = require('cors')({origin: true});\n/* ------------------------- Internal Dependencies -------------------------- */\nimport schema from \"./data/schema\"\n\nconst validateFirebaseIdToken = (req, res, next) => {\n  if ((!req.headers.authorization || !req.headers.authorization.startsWith('Bearer ')) &&\n      !req.cookies.__session) {\n    console.error('No Firebase ID token was passed as a Bearer token in the Authorization header.',\n        'Make sure you authorize your request by providing the following HTTP header:',\n        'Authorization: Bearer <Firebase ID Token>',\n        'or by passing a \"__session\" cookie.');\n    res.status(403).send('Unauthorized');\n    return;\n  }\n\n  let idToken;\n  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer ')) {\n    // Read the ID Token from the Authorization header.\n    idToken = req.headers.authorization.split('Bearer ')[1];\n  } else {\n    // Read the ID Token from cookie.\n    idToken = req.cookies.__session;\n  }\n  admin.auth().verifyIdToken(idToken).then(decodedIdToken => {\n    req.user = decodedIdToken;\n    next();\n  }).catch(error => {\n    res.status(403).send('Unauthorized');\n  });\n};\n\n/* ----------------------------- Module Logic ------------------------------- */\nconst setupGraphQLServer = () => {\n  // setup server\n  const graphQLServer = express()\n  graphQLServer.use(cors)\n  graphQLServer.use(cookieParser)\n  // graphQLServer.use(validateFirebaseIdToken)\n\n  // Main API (/api/graphql)\n  graphQLServer.use(\n    \"/graphql\",\n    bodyParser.json(),\n    graphqlExpress({ schema, context: {} })\n  )\n\n  // Debugging API (/api/graphiql)\n  graphQLServer.use(\n    \"/graphiql\",\n    graphiqlExpress({ endpointURL: \"/api/graphql\" })\n  )\n\n  // Print Schema API (/api/schema) | Generate Public schema for future public API\n  graphQLServer.use(\"/schema\", (req, res) => {\n    res.set(\"Content-Type\", \"text/plain\")\n    res.send(printSchema(schema))\n  })\n\n  return graphQLServer\n}\n\nexport default setupGraphQLServer\n"]}