{"version":3,"sources":["../src/index.js"],"names":["_","require","functions","admin","stripe","config","token","twilio","VoiceResponse","twiml","shortid","moment","db","initializeApp","firebase","firestore","currency","accountSid","accountsid","authToken","authtoken","twilioClient","graphQLServer","exports","api","https","onRequest","authenticationComplete","auth","user","onCreate","eid","event","data","uid","images","imageProfile","photoURL","name","nameDisplay","displayName","nameFirst","contact","contactEmail","email","provider","providerData","collection","add","person","authenticationUserOnCreate","database","ref","key","databaseWrite","writeType","entity","branches","pointer","payload","mutateRequest","val","metadata","hotlineDepartment","branch","omit","days","match","length","time","dateEnd","epochToday","dayendEpoch","Date","get","hourStart","currentHour","activeReferenceHotline","once","then","value","twilioVoice","voiceResponse","dial","activeVolunteers","forEach","number","volunteer","contactPhone","response","send","toString","twilioSmsMonitorOutbound","generate","smsRequest","timestamp","dataKey","twilioSyncCalls","calls","each","direction","call","duration","forwardedFrom","from","fromFormatted","endTime","phoneNumberSid","startTime","status","to","toFormatted","price","twilioSyncMessages","messages","body","message","errorCode","errorMessage","numMedia","sid","priceUnit","uri","createStripeCustomer","customers","create","stripeId","customer","id","stripeChargeRequest","document","charges","amount","source","description","console","log","catch","e","addPaymentSource","onWrite","params","userId","snapshot","createSource","adminRef","parent","set","child","userFacingMessage","error","reportError","cleanupUser","onDelete","del","customer_id","remove"],"mappings":"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","file":"index.js","sourcesContent":["/* ------------------------ External Dependencies ------------------------ */\nconst _ = require('lodash')\nconst functions = require('firebase-functions');\nconst admin = require('firebase-admin');\nconst stripe = require('stripe')(functions.config().stripe.token);\nconst twilio = require('twilio');\nconst VoiceResponse = require('twilio').twiml.VoiceResponse;\nconst shortid = require('shortid'); // https://www.npmjs.com/package/shortid\nconst moment = require('moment-timezone')\n/* ------------------------- Internal Dependencies -------------------------- */\nconst db = require('./database');\nimport setupGraphQLServer from './graphql'\nimport { twilioTextSend } from './twilio'\nimport { transformUserOnCreate } from './schema/transform'\n/*--- Third-Party Integrations ---*/\nimport todayEpoch from './timewatch/todayEpoch'\nimport todayMatch from './timewatch/todayMatch'\n/* ------------------------ Initialize Dependencies ------------------------- */\nadmin.initializeApp(functions.config().firebase);\nconst firestore = admin.firestore();\n\n// Stripe\nconst currency = functions.config().stripe.currency || 'USD';\n\n// Twilio\nconst accountSid = functions.config().twilio.accountsid\nconst authToken = functions.config().twilio.authtoken\nconst twilioClient = new twilio(accountSid, authToken);\n/*---*---------------              ---------------*---* \n                         GraphQL \n/*---*---------------              ---------------*---*/\nconst graphQLServer = setupGraphQLServer()\nexports.api = functions.https.onRequest(graphQLServer)\n\n\n/*---*---------------              ---------------*---* \n                         Data Flow\n/*---*---------------              ---------------*---*/\n\n\n/*---*---------------              ---------------*---* \n                      Authentication \n/*---*---------------              ---------------*---*/\nexports.authenticationComplete = functions.auth.user().onCreate(event => {\n  const person = {\n    eid: event.data.uid,\n    images: {\n      imageProfile: event.data.photoURL\n    },\n    name: {\n      nameDisplay: event.data.displayName,\n      nameFirst: event.data.displayName,\n    },\n    contact: {\n      contactEmail: event.data.email,\n    },\n    provider: event.data.providerData,\n  }\n  firestore.collection('people').add(person)\n});\n\nexports.authenticationUserOnCreate = functions.database.ref('/users/{user}')\n  .onCreate(event => {\n    const pointer = event.data.key \n\n    \n    db.databaseWrite({\n      config: {writeType: 'update'},\n      entity: 'users',\n      branches: [pointer],\n      payload: {pointer},\n    })\n  })\n\n/*---*---------------              ---------------*---* \n                         Mutate\n/*---*---------------              ---------------*---*/\nexports.mutateRequest = functions.database.ref('/mutate/request/{request}')\n\n  /*--- Monitor User Create | Insert additional User data.   (DB Middleware?)   ---*/\n  .onCreate(event => {\n    const eventKey = event.data.key \n    const data = event.data.val()\n\n    /* Entity | Target the requested entity to mutate */\n    if(data.metadata.entity) {\n      switch(data.metadata.entity) {\n\n        /* Volunter Hotline */\n        case('volunteerHotline'):\n          // TODO Add additional verification, besides just existing. It needs to match an enabled hotline.\n          if(data.metadata.hotlineDepartment)\n          {\n            db.databaseWrite({\n              config: {writeType: 'push'},\n              entity: 'volunteer',\n              branch: ['hotline', data.metadata.hotlineDepartment, 'storage'],\n              payload: _.omit(data.payload, 'userRequesting'),\n            })\n            const match = todayMatch(data.payload.days)\n            if (match.length){\n              const epochToday = todayEpoch(\"America/Los_Angeles\")\n              if (data.payload.time.dateEnd >= epochToday.dayendEpoch)\n              {\n                db.databaseWrite({\n                  config: {writeType: 'push'},\n                  entity: 'volunteer',\n                  branch: ['hotline', 'immigration', 'today'],\n                  payload: data.payload,\n                })\n\n                let currentHour = moment(new Date(),\"America/Los_Angeles\").get('hour'); const nextHour = currentHour + 1\n                if (data.payload.time.hourStart <= currentHour)\n                {\n                  const activeReferenceHotline = admin.database().ref('/volunteer/hotline/immigration/active')\n                  activeReferenceHotline.once('value').then(value => {\n                    let newValue = value.val()\n                    db.databaseWrite({\n                      config: {writeType: 'push'},\n                      entity: 'volunteer',\n                      branch: ['hotline', 'immigration', 'active'],\n                      payload: data.payload,\n                    })\n                  })\n                }\n              } \n            }\n          }\n          break;\n      }\n    }\n  })\n\n/* -------------------------------------------------------------------------- */\n/* ------------------------- External API Services -------------------------- */\n/* -------------------------------------------------------------------------- */\n\n/*---*---               ---*---* \n            Twilio\n            https://www.twilio.com/docs/api/twiml/client\n*---*---               ---*---*/\nexports.twilioVoice = functions.https.onRequest((request,response)=> {\n  const voiceResponse = new VoiceResponse();\n  const dial = voiceResponse.dial();\n  const activeReferenceHotline = admin.database().ref('/volunteer/hotline/immigration/active')\n  activeReferenceHotline.once('value').then(activeVolunteers => {\n    const data = activeVolunteers.val()\n    _.forEach(data, volunteer=>{\n      dial.number(`1${volunteer.contact.contactPhone}`)\n    })\n  response.send(voiceResponse.toString())\n  })\n})\n\n\n/*---*---               ---*---* \n            Twilio\n            https://www.twilio.com/docs/api/twiml/client\n*---*---               ---*---*/\nexports.twilioSmsMonitorOutbound = functions.database.ref('/infrastructure/messages/outbound/request/{messages}')\n  .onCreate(event => {\n      const dataKey = event.data.key // SMS Request Key | Generated by Firebase\n      const smsRequest = event.data.val(); // SMS Request Values | Latest Child from onCreate\n\n      /**\n       * @todo We need to add more PERMISSIONS CHECKS for SMS enhanced security.\n       * In addition the system should monitor for attempts to abuse SMS services, either by tracking volume or\n       * doing multiple verifications and looking for abnormalities in frontend/backend security checks.\n       * \n       * We trust cookies and Firebase, but \n       * \n       * Steps for Security\n       * 1. The Database rules limits who can write to the infrastructure \n       */\n      if (true) {      \n        const uid = shortid.generate(); // Universal Identification\n        smsRequest.metadata.uid = uid\n        smsRequest.metadata.timestamp = new Date()\n        /*--- DatabaseWrite | Infrastructure Communication Message Outbound Request ---*/ \n        /**\n         * Add a Universal Identifier to the Request\n         */\n        db.databaseWrite({\n          entity: 'infrastructure',\n          branch: ['messages', 'outbound', 'request', dataKey],\n          payload: {uid},\n          config: {\n            writeType: 'update'\n          }\n        })\n        \n        /**\n         * Log the SMS \n         */\n        db.databaseWrite({\n          entity: 'activity',\n          branch: ['sms'],\n          payload: {smsRequest},\n          config: {\n            writeType: 'push'\n          }\n        })\n\n        const payload = smsRequest.payload\n        twilioTextSend(uid, payload)\n      }\n  });\n\nexports.twilioSyncCalls = functions.https.onRequest((request,response)=> {\n  twilioClient.calls\n    .each((call) => {\n      const t = firestore.collection('calls').add({\n        direction: call.direction,\n        duration: call.duration,\n        forwardedFrom: call.forwardedFrom,\n        from: call.from,\n        fromFormatted: call.fromFormatted,\n        endTime: call.endTime,\n        phoneNumberSid: call. phoneNumberSid,\n        startTime: call.startTime,\n        status: call.status,\n        to: call.to,\n        toFormatted: call.toFormatted,\n        price: call.price,\n      })\n    });\n    response.send('Syncing Calls') \n})\n\nexports.twilioSyncMessages = functions.https.onRequest((request,response)=> {\n  twilioClient.messages\n    .each((message) => {\n      firestore.collection('messages').add({\n        body: message.body,\n        direction: message.direction,\n        errorCode: message.errorCode,\n        errorMessage: message.errorMessage,\n        from: message.from,\n        numMedia: message.numMedia,\n        status: message.status,\n        sid: message.sid,\n        to: message.to,\n        price: message.price,\n        priceUnit: message.priceUnit,\n        uri: message.uri,\n      })\n    });\n})\n\n\n/*---*---               ---*---* \n            Stripe\n            https://github.com/firebase/functions-samples/blob/master/stripe/functions/index.js\n*---*---               ---*---*/\n\n// When a user is created, register them with Stripe\nexports.createStripeCustomer = functions.auth.user().onCreate(event => {\n  const data = event.data;\n  const person = {\n    eid: event.data.uid,\n    images: {\n      imageProfile: event.data.photoURL\n    },\n    name: {\n      nameDisplay: event.data.displayName,\n      nameFirst: event.data.displayName,\n    },\n    contact: {\n      contactEmail: event.data.email,\n    },\n    provider: event.data.providerData,\n  }\n\n  return stripe.customers.create({\n    email: data.email\n  }).then(customer => {\n    firestore.collection('customers').add({\n        eid: event.data.uid,\n        stripeId: customer.id\n      })\n  });\n});\n\n\n\n\nexports.stripeChargeRequest = functions.firestore\n  .document('commerceTokens/{token}')\n  .onCreate(event => {\n    const data = event.data.data();\n\n    stripe.charges.create({\n      amount: 50,\n      currency: \"usd\",\n      source: data.token.id,\n      description: \"Charge for kames\"\n    }).then(value=>{\n      console.log(value)\n    }).catch(e=>{\n      console.log(e)\n    })\n});\n\n\n// Add a payment source (card) for a user by writing a stripe payment source token to Realtime database\nexports.addPaymentSource = functions.database.ref('/stripe_customers/{userId}/sources/{pushId}/token').onWrite(event => {\n  const source = event.data.val();\n  if (source === null) return null;\n  return admin.database().ref(`/stripe_customers/${event.params.userId}/customer_id`).once('value').then(snapshot => {\n    return snapshot.val();\n  }).then(customer => {\n    return stripe.customers.createSource(customer, {source});\n  }).then(response => {\n      return event.data.adminRef.parent.set(response);\n    }, error => {\n      return event.data.adminRef.parent.child('error').set(userFacingMessage(error)).then(() => {\n        return reportError(error, {user: event.params.userId});\n      });\n  });\n});\n\n// When a user deletes their account, clean up after them\nexports.cleanupUser = functions.auth.user().onDelete(event => {\n  return admin.database().ref(`/stripe_customers/${event.data.uid}`).once('value').then(snapshot => {\n    return snapshot.val();\n  }).then(customer => {\n    return stripe.customers.del(customer.customer_id);\n  }).then(() => {\n    return admin.database().ref(`/stripe_customers/${event.data.uid}`).remove();\n  });\n});\n"]}