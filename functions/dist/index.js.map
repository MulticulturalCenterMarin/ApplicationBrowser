{"version":3,"sources":["../src/index.js"],"names":["_","require","functions","admin","db","initializeApp","config","firebase","firestore","graphQLServer","exports","api","https","onRequest","authenticationComplete","auth","user","onCreate","uid","event","data","images","imageProfile","photoURL","name","nameDisplay","displayName","nameFirst","contact","contactEmail","email","provider","providerData","collection","add","person","authenticationUserOnCreate","database","ref","key","databaseWrite","writeType","entity","branches","pointer","payload","mutateRequest","val","metadata"],"mappings":"aAMA,sH,wEALA,GAAMA,GAAIC,QAAQ,QAAR,CAAV,CACMC,UAAYD,QAAQ,oBAAR,CADlB,CAEME,MAAQF,QAAQ,gBAAR,CAFd,CAIMG,GAAKH,QAAQ,YAAR,CAJX,CASAE,MAAME,aAAN,CAAoBH,UAAUI,MAAV,GAAmBC,QAAvC,C,CACA,GAAMC,WAAYL,MAAMK,SAAN,EAAlB,CAIMC,cAAgB,uBAJtB,CAKAC,QAAQC,GAAR,CAAcT,UAAUU,KAAV,CAAgBC,SAAhB,CAA0BJ,aAA1B,C,CAKdC,QAAQI,sBAAR,CAAiCZ,UAAUa,IAAV,CAAeC,IAAf,GAAsBC,QAAtB,CAA+B,WAAS,CACvE,GAAM,GAAS,CACbC,IAAKC,EAAMC,IAAN,CAAWF,GADH,CAEbG,OAAQ,CACNC,aAAcH,EAAMC,IAAN,CAAWG,QADnB,CAFK,CAKbC,KAAM,CACJC,YAAaN,EAAMC,IAAN,CAAWM,WADpB,CAEJC,UAAWR,EAAMC,IAAN,CAAWM,WAFlB,CALO,CASbE,QAAS,CACPC,aAAcV,EAAMC,IAAN,CAAWU,KADlB,CATI,CAYbC,SAAUZ,EAAMC,IAAN,CAAWY,YAZR,CAAf,CAcAxB,UAAUyB,UAAV,CAAqB,QAArB,EAA+BC,GAA/B,CAAmCC,CAAnC,CACD,CAhBgC,C,CAkBjCzB,QAAQ0B,0BAAR,CAAqClC,UAAUmC,QAAV,CAAmBC,GAAnB,CAAuB,eAAvB,EAClCrB,QADkC,CACzB,WAAS,CACjB,GAAM,GAAUE,EAAMC,IAAN,CAAWmB,GAA3B,CAGAnC,GAAGoC,aAAH,CAAiB,CACflC,OAAQ,CAACmC,UAAW,QAAZ,CADO,CAEfC,OAAQ,OAFO,CAGfC,SAAU,CAACC,CAAD,CAHK,CAIfC,QAAS,CAACD,SAAD,CAJM,CAAjB,CAMD,CAXkC,C,CAgBrClC,QAAQoC,aAAR,CAAwB5C,UAAUmC,QAAV,CAAmBC,GAAnB,CAAuB,2BAAvB,EAGrBrB,QAHqB,CAGZ,WAAS,CACjB,GAAM,GAAWE,EAAMC,IAAN,CAAWmB,GAA5B,CACM,EAAOpB,EAAMC,IAAN,CAAW2B,GAAX,EADb,CAIA,GAAG3B,EAAK4B,QAAL,CAAcN,MAAjB,CACE,OAAOtB,EAAK4B,QAAL,CAAcN,MAArB,GAIH,CAbqB,C","file":"index.js","sourcesContent":["/* ------------------------ External Dependencies ------------------------ */\nconst _ = require('lodash')\nconst functions = require('firebase-functions');\nconst admin = require('firebase-admin');\n/* ------------------------- Internal Dependencies -------------------------- */\nconst db = require('./database');\nimport setupGraphQLServer from './graphql'\nimport { transformUserOnCreate } from './schema/transform'\n\n/* ------------------------ Initialize Dependencies ------------------------- */\nadmin.initializeApp(functions.config().firebase);\nconst firestore = admin.firestore();\n/*---*---------------              ---------------*---* \n                         GraphQL \n/*---*---------------              ---------------*---*/\nconst graphQLServer = setupGraphQLServer()\nexports.api = functions.https.onRequest(graphQLServer)\n\n/*---*---------------              ---------------*---* \n                      Authentication \n/*---*---------------              ---------------*---*/\nexports.authenticationComplete = functions.auth.user().onCreate(event => {\n  const person = {\n    uid: event.data.uid,\n    images: {\n      imageProfile: event.data.photoURL\n    },\n    name: {\n      nameDisplay: event.data.displayName,\n      nameFirst: event.data.displayName,\n    },\n    contact: {\n      contactEmail: event.data.email,\n    },\n    provider: event.data.providerData,\n  }\n  firestore.collection('people').add(person)\n});\n\nexports.authenticationUserOnCreate = functions.database.ref('/users/{user}')\n  .onCreate(event => {\n    const pointer = event.data.key \n\n    \n    db.databaseWrite({\n      config: {writeType: 'update'},\n      entity: 'users',\n      branches: [pointer],\n      payload: {pointer},\n    })\n  })\n\n/*---*---------------              ---------------*---* \n                         Mutate\n/*---*---------------              ---------------*---*/\nexports.mutateRequest = functions.database.ref('/mutate/request/{request}')\n\n  /*--- Monitor User Create | Insert additional User data.   (DB Middleware?)   ---*/\n  .onCreate(event => {\n    const eventKey = event.data.key \n    const data = event.data.val()\n\n    /* Entity | Target the requested entity to mutate */\n    if(data.metadata.entity) {\n      switch(data.metadata.entity) {\n\n      }\n    }\n  })\n\n/* -------------------------------------------------------------------------- */\n/* ------------------------- External API Services -------------------------- */\n/* -------------------------------------------------------------------------- */\n\n/*---*---               ---*---* \n            Twilio\n            https://www.twilio.com/docs/api/twiml/client\n*---*---               ---*---*/\n"]}