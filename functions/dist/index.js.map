{"version":3,"sources":["../src/index.js"],"names":["_","require","functions","admin","stripe","twilio","VoiceResponse","twiml","db","initializeApp","config","firebase","firestore","accountSid","accountsid","authToken","authtoken","graphQLServer","exports","api","https","onRequest","authenticationComplete","auth","user","onCreate","uid","event","data","images","imageProfile","photoURL","name","nameDisplay","displayName","nameFirst","contact","contactEmail","email","provider","providerData","collection","add","person","authenticationUserOnCreate","database","ref","key","databaseWrite","writeType","entity","branches","pointer","payload","mutateRequest","val","metadata","hotlineDepartment","branch","omit","days","match","length","time","dateEnd","epochToday","dayendEpoch","moment","Date","get","hourStart","currentHour","activeReferenceHotline","once","then","value","twilioVoice","voiceResponse","dial","activeVolunteers","forEach","number","volunteer","contactPhone","response","send","toString","hidden","twilioClient","calls","each","console","log","call","direction","duration","forwardedFrom","from","fromFormatted","endTime","startTime","price","t"],"mappings":"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","file":"index.js","sourcesContent":["/* ------------------------ External Dependencies ------------------------ */\nconst _ = require('lodash')\nconst functions = require('firebase-functions');\nconst admin = require('firebase-admin');\nconst stripe = require('stripe');\nconst twilio = require('twilio');\nconst VoiceResponse = require('twilio').twiml.VoiceResponse;\n/* ------------------------- Internal Dependencies -------------------------- */\nconst db = require('./database');\nimport setupGraphQLServer from './graphql'\nimport { transformUserOnCreate } from './schema/transform'\n/*--- Third-Party Integrations ---*/\nimport todayEpoch from './timewatch/todayEpoch'\nimport todayMatch from './timewatch/todayMatch'\n/* ------------------------ Initialize Dependencies ------------------------- */\nadmin.initializeApp(functions.config().firebase);\nconst firestore = admin.firestore();\nconst accountSid = functions.config().twilio.accountsid\nconst authToken = functions.config().twilio.authtoken\n/*---*---------------              ---------------*---* \n                         GraphQL \n/*---*---------------              ---------------*---*/\nconst graphQLServer = setupGraphQLServer()\nexports.api = functions.https.onRequest(graphQLServer)\n\n/*---*---------------              ---------------*---* \n                      Authentication \n/*---*---------------              ---------------*---*/\nexports.authenticationComplete = functions.auth.user().onCreate(event => {\n  const person = {\n    uid: event.data.uid,\n    images: {\n      imageProfile: event.data.photoURL\n    },\n    name: {\n      nameDisplay: event.data.displayName,\n      nameFirst: event.data.displayName,\n    },\n    contact: {\n      contactEmail: event.data.email,\n    },\n    provider: event.data.providerData,\n  }\n  firestore.collection('people').add(person)\n});\n\nexports.authenticationUserOnCreate = functions.database.ref('/users/{user}')\n  .onCreate(event => {\n    const pointer = event.data.key \n\n    \n    db.databaseWrite({\n      config: {writeType: 'update'},\n      entity: 'users',\n      branches: [pointer],\n      payload: {pointer},\n    })\n  })\n\n/*---*---------------              ---------------*---* \n                         Mutate\n/*---*---------------              ---------------*---*/\nexports.mutateRequest = functions.database.ref('/mutate/request/{request}')\n\n  /*--- Monitor User Create | Insert additional User data.   (DB Middleware?)   ---*/\n  .onCreate(event => {\n    const eventKey = event.data.key \n    const data = event.data.val()\n\n    /* Entity | Target the requested entity to mutate */\n    if(data.metadata.entity) {\n      switch(data.metadata.entity) {\n\n        /* Volunter Hotline */\n        case('volunteerHotline'):\n          // TODO Add additional verification, besides just existing. It needs to match an enabled hotline.\n          if(data.metadata.hotlineDepartment)\n          {\n            db.databaseWrite({\n              config: {writeType: 'push'},\n              entity: 'volunteer',\n              branch: ['hotline', data.metadata.hotlineDepartment, 'storage'],\n              payload: _.omit(data.payload, 'userRequesting'),\n            })\n            const match = todayMatch(data.payload.days)\n            if (match.length){\n              const epochToday = todayEpoch(\"America/Los_Angeles\")\n              if (data.payload.time.dateEnd >= epochToday.dayendEpoch)\n              {\n                db.databaseWrite({\n                  config: {writeType: 'push'},\n                  entity: 'volunteer',\n                  branch: ['hotline', 'immigration', 'today'],\n                  payload: data.payload,\n                })\n\n                let currentHour = moment(new Date(),\"America/Los_Angeles\").get('hour'); const nextHour = currentHour + 1\n                if (data.payload.time.hourStart <= currentHour)\n                {\n                  const activeReferenceHotline = admin.database().ref('/volunteer/hotline/immigration/active')\n                  activeReferenceHotline.once('value').then(value => {\n                    let newValue = value.val()\n                    db.databaseWrite({\n                      config: {writeType: 'push'},\n                      entity: 'volunteer',\n                      branch: ['hotline', 'immigration', 'active'],\n                      payload: data.payload,\n                    })\n                  })\n                }\n              } \n            }\n          }\n          break;\n      }\n    }\n  })\n\n/* -------------------------------------------------------------------------- */\n/* ------------------------- External API Services -------------------------- */\n/* -------------------------------------------------------------------------- */\n\n/*---*---               ---*---* \n            Twilio\n            https://www.twilio.com/docs/api/twiml/client\n*---*---               ---*---*/\nexports.twilioVoice = functions.https.onRequest((request,response)=> {\n  const voiceResponse = new VoiceResponse();\n  const dial = voiceResponse.dial();\n  const activeReferenceHotline = admin.database().ref('/volunteer/hotline/immigration/active')\n  activeReferenceHotline.once('value').then(activeVolunteers => {\n    const data = activeVolunteers.val()\n    _.forEach(data, volunteer=>{\n      dial.number(`1${volunteer.contact.contactPhone}`)\n    })\n  response.send(voiceResponse.toString())\n  })\n})\n\nexports.hidden = functions.https.onRequest((request,response)=> {\n  const twilioClient = new twilio(accountSid, authToken);\n  twilioClient.calls\n    .each((call) => {\n      console.log(call)\n      const t = firestore.collection('callRecords').add({\n        direction: call.direction,\n        duration: call.duration,\n        forwardedFrom: call.forwardedFrom,\n        from: call.from,\n        fromFormatted: call.fromFormatted,\n        endTime: call.endTime,\n        startTime: call.startTime,\n        price: call.price,\n      })\n      console.log(t)\n    });\n\n  \n})"]}