{"version":3,"sources":["../src/index.js"],"names":["_","require","functions","admin","stripe","twilio","VoiceResponse","twiml","shortid","moment","db","initializeApp","config","firebase","firestore","graphQLServer","exports","api","https","onRequest","hourlyJobs","pubsub","topic","onPublish","console","log","Date","date","getHours","database","ref","orderByChild","startAt","currentHour","endAt","nextHour","on","snapshot","val","databaseWrite","writeType","entity","branches","payload","activeHotlineVolunteer","dailyJobs","epochToday","midnightEpoch","dayendEpoch","todayBatchHotlineVolunteer","authenticationComplete","auth","user","onCreate","event","data","collection","doc","set","merge","authenticationUserOnCreate","key","pointer","mutateRequest","metadata","map","pKey","pValue","hotlineDepartment","omit","days","match","length","time","dateEnd","get","hourStart","activeReferenceHotline","once","then","value","twilioVoice","voiceResponse","dial","forEach","activeVolunteers","number","volunteer","contact","contactPhone","response","send","toString","twilioVoiceInformation","twilioSmsMonitorOutbound","generate","smsRequest","uid","timestamp","dataKey","communityOrganizationOnCreate","communityProjectOnCreate","communityPersonOnCreate"],"mappings":"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","file":"index.js","sourcesContent":["/* ----------------------- Important Documentation ----------------------- */\n// child_added: https://firebase.google.com/docs/database/admin/retrieve-data\n\n/* ----------------------------- Constants ------------------------------- */\n\n/* ------------------------ External Dependencies ------------------------ */\nconst _ = require('lodash')\nconst functions = require('firebase-functions');\nconst admin = require('firebase-admin');\n/*--- Third-Party Integrations ---*/\nconst stripe = require('stripe');\nconst twilio = require('twilio');\nconst VoiceResponse = require('twilio').twiml.VoiceResponse;\n\n/*--- Utility Packages ---*/\nconst shortid = require('shortid'); // https://www.npmjs.com/package/shortid\nconst moment = require('moment-timezone')\n/* ------------------------- Internal Dependencies -------------------------- */\n\nconst db = require('./database');\nimport schemaUser from './schema/user'\nimport setupGraphQLServer from './graphql'\nimport { twilioTextSend } from './twilio'\nimport { transformUserOnCreate } from './schema/transform'\nimport todayEpoch from './timewatch/todayEpoch'\nimport todayMatch from './timewatch/todayMatch'\n\n/* ------------------------ Initialize Dependencies ------------------------- */\nadmin.initializeApp(functions.config().firebase);\nconst firestore = admin.firestore();\n\n/*---*---------------              ---------------*---* \n                      Apollo => GraphQL \n/*---*---------------              ---------------*---*/\nconst graphQLServer = setupGraphQLServer()\nexports.api = functions.https.onRequest(graphQLServer)\n\n/*---*---------------              ---------------*---* \n                      PubSub\n/*---*---------------              ---------------*---*/\nexports.hourlyJobs=\n  functions.pubsub.topic('hourly-tick').onPublish((event) => {\n    console.log('Hourly Tick Initialize')\n\n    const date = new Date()\n    let currentHour = date.getHours()\n    const nextHour = currentHour++\n\n    functions.database.ref('/volunteer/hotline/immigration/today')\n      .orderByChild(\"hourStart\").startAt(currentHour).endAt(nextHour)\n        .on('child_added', snapshot=> {\n          console.log(snapshot)\n          const activeHotlineVolunteer = snapshot.val()\n          db.databaseWrite({\n            config: {writeType: 'push'},\n            entity: 'volunteer',\n            branches: ['hotline', 'immigration', 'active'],\n            payload: {activeHotlineVolunteer},\n          })\n        })\n  });\n\nexports.dailyJobs=\n  functions.pubsub.topic('daily-tick').onPublish((event) => {\n    console.log('Daily Tick Initialize')\n\n    const epochToday = todayEpoch(\"America/Los_Angeles\")\n\n    functions.database.ref('/volunteer/hotline/immigration/storage') // TODO: The \"immigration\" part needs to be a variable\n      .orderByChild(\"hourStart\").startAt(epochToday.midnightEpoch).endAt(epochToday.dayendEpoch)\n        .on('child_added', snapshot=> {\n          console.log(snapshot)\n          const todayBatchHotlineVolunteer = snapshot.val()\n          db.databaseWrite({\n            config: {writeType: 'push'},\n            entity: 'volunteer',\n            branches: ['hotline', 'immigration', 'today'],\n            payload: {todayBatchHotlineVolunteer},\n          })\n        })\n  });\n\n/*---*---------------              ---------------*---* \n                      Authentication \n/*---*---------------              ---------------*---*/\n\n/*---*--- New Authentication | Manage multiple authentication methods --*---*/\n/**\n * @func authenticationComplete\n * @desc Track application authentications and dispatch further actions.\n * \n * Transform User data to match database schema for initial database write.\n * Resource: https://firebase.google.com/docs/auth/extend-with-functions\n */\nexports.authenticationComplete = functions.auth.user().onCreate(event => {\n  const payload = transformUserOnCreate(event.data);\n  const newPerson = firestore.collection(`people`).doc('testing').set(event.data)\n\n  /*--- User Create | Generate new user in the application database  ---*/\n  /**\n   * @todo Add \"Authentication Routing\" to handle different login methods: provider, phone, annonymous, etc...\n   * \n   * @current The \"logic gate\" defaults to true for active development.\n   */\n  if(true) {\n    db.databaseWrite({\n      config: {writeType: 'push'},\n      entity: 'users',\n      branches: [],\n      payload: _.merge({},schemaUser, payload),\n    })\n  } /*end if*/\n\n});\n\n/**\n * @func authenticationUserOnCreate\n * @desc Track application authentications and dispatch further actions.\n * \n * Transform User data to match database schema for initial database write.\n * Resource: https://firebase.google.com/docs/auth/extend-with-functions\n */\nexports.authenticationUserOnCreate = functions.database.ref('/users/{user}')\n\n  /*--- Monitor User Create | Insert additional User data.   (DB Middleware?)   ---*/\n  /**\n   * @const {String} pointer\n   * @desc The \"pointer\" is the parent reference key. To limit backend function calls,\n   * and unnecessary filtering (.parent(), etc...) the pointer is passed, in addition\n   * to the User UID, for easier interaction with a denormalized database.  \n   * \n   * @todo Optimize this request, because it's uneccesary to call databasWrite in seperate function.\n   */\n  .onCreate(event => {\n    const pointer = event.data.key \n    db.databaseWrite({\n      config: {writeType: 'update'},\n      entity: 'users',\n      branches: [pointer],\n      payload: {pointer},\n    })\n  })\n\n\n/*---*---------------              ---------------*---* \n                        Volunteer \n/*---*---------------              ---------------*---*/\n\n\nexports.mutateRequest = functions.database.ref('/volunteer/hotline/immigration/{request}')\n.onCreate(event => {\n  const eventKey = event.data.key \n  const data = event.data.val()\n\n})\n\n/*---*---------------              ---------------*---* \n                         Mutate\n\nThe mutate functions are responsible for transforming information within the application \"indirectly\".\nGenerally we can provide users direct access to writing to the Firebase Database using the Database Rules and Authentications services.\n\nHowever, to define more complex action requisites(multiple database writes, payment, time, etc...) for mutating\nthe database (or dispatching expensive requests to third-party services) the Mutate sector\nwill help us accomplish those tasks, without cluttering the Frontend Interface code or doing \"strange\" things in other parts of the codebase.\n\n1. Requests to change sensitive branch information(user, communications, infrastructure) are added to the mutate branch.\n2. The application can fulfull or deny mutation requests based of a set requisites that have or have not been met.\n\nNote: The Mutation sector, relative to all other sectors, will probably by the most dynamic from application to application,\nso add new mutation functionality with confidence young/master Jedi!\n\nMission: The application from front to back should attempt to be \"functional\".\nHopefully if all goes as planned we rewind/forward the entire app state beginning-to-end (seconds,minutes, hours, days, weeks, etc...)\n\nIn other words \"If another code slinger, is pushing code on my block I want to know about.\" -Gangster\n\n### User ###\nThe User mutation function watches for a single object matching User profile fields. Depending\non what fields were updated, which we know because the Frontend Forms follows a repeatable pattern for creating field names,\nso we map over those values (contact, address, identity, etc...) and update each User branches accordingly.\n\n1 Frontend request = N writes in the backend\n\n\n### Volunteer ###\n\n/*---*---------------              ---------------*---*/\nexports.mutateRequest = functions.database.ref('/mutate/request/{request}')\n\n  /*--- Monitor User Create | Insert additional User data.   (DB Middleware?)   ---*/\n  .onCreate(event => {\n    const eventKey = event.data.key \n    const data = event.data.val()\n\n    /* Entity | Target the requested entity to mutate */\n    if(data.metadata.entity) {\n      switch(data.metadata.entity) {\n\n\n        /* User Profile Update */\n        case('user'): // TODO Change this case to 'userProfileUpdate'\n          _.map(data.payload, (pValue, pKey)=> {\n            db.databaseWrite({\n              config: {writeType: 'update'},\n              entity: 'users',\n              branches: [data.metadata.pointer, 'identity', pKey],\n              payload: pValue,\n            })\n          })\n          break;\n        \n        /*--- Community Person Add ---*/\n        case('CommunityPersonAdd'):\n            db.databaseWrite({\n              config: {writeType: 'push'},\n              entity: 'community',\n              branches: ['people'],\n              payload: data.payload,\n          })\n          break;\n        case('CommunityOrganizationAdd'):\n            db.databaseWrite({\n              config: {writeType: 'push'},\n              entity: 'community',\n              branches: ['organizations'],\n              payload: data.payload,\n          })\n          break;\n        case('CommunityProjectAdd'):\n            db.databaseWrite({\n              config: {writeType: 'push'},\n              entity: 'community',\n              branches: ['projects'],\n              payload: data.payload,\n          })\n          break;\n\n        /* Volunter Hotline */\n        case('volunteerHotline'):\n          // TODO Add additional verification, besides just existing. It needs to match an enabled hotline.\n          if(data.metadata.hotlineDepartment)\n          {\n            db.databaseWrite({\n              config: {writeType: 'push'},\n              entity: 'volunteer',\n              branches: ['hotline', data.metadata.hotlineDepartment, 'storage'],\n              payload: _.omit(data.payload, 'userRequesting'),\n            })\n            const match = todayMatch(data.payload.days)\n            if (match.length){\n              const epochToday = todayEpoch(\"America/Los_Angeles\")\n              if (data.payload.time.dateEnd >= epochToday.dayendEpoch)\n              {\n                db.databaseWrite({\n                  config: {writeType: 'push'},\n                  entity: 'volunteer',\n                  branches: ['hotline', 'immigration', 'today'],\n                  payload: data.payload,\n                })\n\n                let currentHour = moment(new Date(),\"America/Los_Angeles\").get('hour'); const nextHour = currentHour + 1\n                if (data.payload.time.hourStart <= currentHour)\n                {\n                  const activeReferenceHotline = admin.database().ref('/volunteer/hotline/immigration/active')\n                  activeReferenceHotline.once('value').then(value => {\n                    let newValue = value.val()\n                    db.databaseWrite({\n                      config: {writeType: 'push'},\n                      entity: 'volunteer',\n                      branches: ['hotline', 'immigration', 'active'],\n                      payload: data.payload,\n                    })\n                  })\n                }\n              } \n            }\n          }\n          break;\n      }\n    }\n  })\n\n/* -------------------------------------------------------------------------- */\n/* ------------------------- External API Services -------------------------- */\n/* -------------------------------------------------------------------------- */\n\n/*---*---               ---*---* \n            Twilio\n            https://www.twilio.com/docs/api/twiml/client\n*---*---               ---*---*/\n\nexports.twilioVoice = functions.https.onRequest((request,response)=> {\n  const voiceResponse = new VoiceResponse();\n  const dial = voiceResponse.dial();\n  const activeReferenceHotline = admin.database().ref('/volunteer/hotline/immigration/active')\n  activeReferenceHotline.on('value').then(activeVolunteers => {\n    _.forEach(activeVolunteers, volunteer=>{\n      dial.number(volunteer.contact.contactPhone)\n    })\n  })\n  response.send(voiceResponse.toString())\n})\n\nexports.twilioVoiceInformation = functions.https.onRequest((request,response)=> {\n  const voiceResponse = new VoiceResponse();\n  const dial = voiceResponse.dial();\n  dial.number('14155262486')\n  dial.number('14153422598')\n  dial.number('14156867259')\n  response.send(voiceResponse.toString())\n})\n\nexports.twilioSmsMonitorOutbound = functions.database.ref('/infrastructure/messages/outbound/request/{messages}')\n  .onCreate(event => {\n      const dataKey = event.data.key // SMS Request Key | Generated by Firebase\n      const smsRequest = event.data.val(); // SMS Request Values | Latest Child from onCreate\n\n      /**\n       * @todo We need to add more PERMISSIONS CHECKS for SMS enhanced security.\n       * In addition the system should monitor for attempts to abuse SMS services, either by tracking volume or\n       * doing multiple verifications and looking for abnormalities in frontend/backend security checks.\n       * \n       * We trust cookies and Firebase, but \n       * \n       * Steps for Security\n       * 1. The Database rules limits who can write to the infrastructure \n       */\n      if (true) {      \n        const uid = shortid.generate(); // Universal Identification\n        smsRequest.metadata.uid = uid\n        smsRequest.metadata.timestamp = new Date()\n        /*--- DatabaseWrite | Infrastructure Communication Message Outbound Request ---*/ \n        /**\n         * Add a Universal Identifier to the Request\n         */\n        db.databaseWrite({\n          entity: 'infrastructure',\n          branches: ['messages', 'outbound', 'request', dataKey],\n          payload: {uid},\n          config: {\n            writeType: 'update'\n          }\n        })\n        \n        /**\n         * Log the SMS \n         */\n        db.databaseWrite({\n          entity: 'activity',\n          branches: ['sms'],\n          payload: {smsRequest},\n          config: {\n            writeType: 'push'\n          }\n        })\n\n        const payload = smsRequest.payload\n        twilioTextSend(uid, payload)\n      }\n  });\n\n/*---*---               ---*---* \n            Stripe\n            https://stripe.com/docs/stripe.js#the-stripe-object\n*---*---               ---*---*/\n\n/**\n * Stripe :: CustomerCreate\n * @func createStripeCustomer\n * @desc Create a Stripe Customer when a new account is register on the website\n * \n * TODO: This is a broad sweeping net to turn everyone into a customer...\n * We should slit it down, so it's not fired unnecesarily 90% of the time.\n */\n// exports.createStripeCustomer = functions.auth.user().onCreate(event => {\n//   const data = event.data;\n//   return stripe.customers.create({\n//     email: data.email\n//   }).then(customer => {\n//     return admin.database().ref(`/customers/${data.uid}/customer_id`).set(customer.id);\n//   });\n// });\n\n/**\n * Stripe :: CustomerDelete\n * @func deleteStripeCustomer\n * @desc Delete a Stripe Customer account deleted on the application.\n * \n * TODO: We might not want to delete customer data? Safeguard the data?\n */\n// exports.deleteStripeCustomer = functions.auth.user().onDelete(event => {\n//   return admin.database().ref(`/customers/${event.data.uid}`).once('value').then(snapshot => {\n//     return snapshot.val();\n//   }).then(customer => {\n//     return stripe.customers.del(customer);\n//   }).then(() => {\n//     return admin.database().ref(`/customers/${event.data.uid}`).remove();\n//   });\n// });\n\n\n/**\n * Stripe :: CustomerDelete\n * @func deleteStripeCustomer\n * @desc Add a payment source (card) for a user by writing a stripe payment source token to Realtime database\n * \n * TODO: NOT DONE - REWRITE\n */\n\n// exports.addPaymentSource = functions.database.ref('/customers/{userId}/sources/{pushId}/token').onWrite(event => {\n//   const source = event.data.val();\n//   if (source === null) return null;\n//   return admin.database().ref(`/customers/${event.params.userId}/customer_id`).once('value').then(snapshot => {\n//     return snapshot.val();\n//   }).then(customer => {\n//     return stripe.customers.createSource(customer, {source});\n//   }).then(response => {\n//       return event.data.adminRef.parent.set(response);\n//     }, error => {\n//       return event.data.adminRef.parent.child('error').set(userFacingMessage(error)).then(() => {\n//         return reportError(error, {user: event.params.userId});\n//       });\n//   });\n// });\n\n// // When a user deletes their account, clean up after them\n// exports.cleanupUser = functions.auth.user().onDelete(event => {\n//   return admin.database().ref(`/stripe_customers/${event.data.uid}`).once('value').then(snapshot => {\n//     return snapshot.val();\n//   }).then(customer => {\n//     return stripe.customers.del(customer);\n//   }).then(() => {\n//     return admin.database().ref(`/stripe_customers/${event.data.uid}`).remove();\n//   });\n// });\n\n\n\n\n/*---*---               ---*---* \n        Firestore Collection Monitoring\n*---*---               ---*---*/\n\n/*---*--- People ---*----*/\n// exports.communityPersonOnCreate = functions\n// .firestore.document('/organizations/{id}')\n// .onCreate(event => {\n\n//   const data = event.data.data()\n\n// })\n\n/*---*--- Organizations ---*----*/\nexports.communityOrganizationOnCreate = functions\n.database.ref('/community/organizations/{organization}')\n.onCreate(event => {\n  console.log(event)\n  const pointer = event.data.key \n  db.databaseWrite({\n    config: {writeType: 'update'},\n    entity: 'community',\n    branches: ['organizations', pointer],\n    payload: {pointer},\n  })\n})\n\n/*---*--- Projects ---*----*/\nexports.communityProjectOnCreate = functions\n.database.ref('/community/projects/{person}')\n.onCreate(event => {\n  const pointer = event.data.key \n  db.databaseWrite({\n    config: {writeType: 'update'},\n    entity: 'community',\n    branches: ['projects', pointer],\n    payload: {pointer},\n  })\n})\n\n/*---*---               ---*---* \n        Realtime Database Branch Monitoring\n*---*---               ---*---*/\n\n/*---*--- People ---*----*/\nexports.communityPersonOnCreate = functions\n.database.ref('/community/people/{person}')\n.onCreate(event => {\n  console.log(event)\n  const pointer = event.data.key \n  db.databaseWrite({\n    config: {writeType: 'update'},\n    entity: 'community',\n    branches: ['people', pointer],\n    payload: {pointer},\n  })\n})\n\n/*---*--- Organizations ---*----*/\nexports.communityOrganizationOnCreate = functions\n.database.ref('/community/organizations/{organization}')\n.onCreate(event => {\n  console.log(event)\n  const pointer = event.data.key \n  db.databaseWrite({\n    config: {writeType: 'update'},\n    entity: 'community',\n    branches: ['organizations', pointer],\n    payload: {pointer},\n  })\n})\n\n/*---*--- Projects ---*----*/\nexports.communityProjectOnCreate = functions\n.database.ref('/community/projects/{person}')\n.onCreate(event => {\n  const pointer = event.data.key \n  db.databaseWrite({\n    config: {writeType: 'update'},\n    entity: 'community',\n    branches: ['projects', pointer],\n    payload: {pointer},\n  })\n})"]}